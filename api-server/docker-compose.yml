version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - PORT=3000
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      - DB_TYPE=sqljs
      - DB_DATABASE=/app/data/database.sqljs
      - DB_SYNCHRONIZE=false
      - DB_LOGGING=false
      - LOG_LEVEL=info
      - LOG_FILE_PATH=/app/logs
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:3000}
      - UPLOAD_DESTINATION=/app/uploads
      - UPLOAD_MAX_FILE_SIZE=10485760
      - I18N_FALLBACK_LANGUAGE=zh
    volumes:
      - api_data:/app/data
      - api_logs:/app/logs
      - api_uploads:/app/uploads
      - api_backups:/app/backups
    restart: unless-stopped
    networks:
      - api_network
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:3000/health',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    image: nginx:alpine
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - api_uploads:/usr/share/nginx/html/uploads:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - api_network

  prometheus:
    image: prom/prometheus:latest
    ports:
      - '9090:9090'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - api_network

  grafana:
    image: grafana/grafana:latest
    ports:
      - '3001:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - api_network

volumes:
  api_data:
  api_logs:
  api_uploads:
  api_backups:
  prometheus_data:
  grafana_data:

networks:
  api_network:
    driver: bridge
